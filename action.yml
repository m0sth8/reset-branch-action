name: 'Neon Database Reset Branch Action'
author: 'Neon Database'
description: 'Resets a Neon branch'
branding:
  icon: 'box'
  color: 'green'

inputs:
  project_id:
    required: true
    description: 'The project id'
  branch:
    required: true
    description: 'The branch name or id to reset'
  api_key:
    description: 'The Neon API key'
    required: true
  parent:
    description: 'If specified, the branch will be reset to the parent branch'
    required: false

outputs:
  branch_id:
    description: 'Returns the branch id'
    value: ${{ steps.reset-branch.outputs.branch_id }}
  db_url:
    description: 'DATABASE_URL of the branch after the reset'
    value: ${{ steps.reset-branch.outputs.db_url }}
  db_url_with_pooler:
    description: 'DATABASE_URL with pooler of the branch after the reset'
    value: ${{ steps.reset-branch.outputs.db_url_with_pooler }}


runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
    - run: npm i -g neonctl@v1
      shell: bash
    - name: Reset branch
      env:
        NEON_API_KEY: ${{ inputs.api_key }}
      id: reset-branch
      shell: bash
      run: |
        neonctl branches reset ${{ inputs.branch }} \
          --project-id ${{ inputs.project_id }} \
          $(if [[ -n "${{ inputs.parent }}" ]] && [[ "${{ inputs.parent }}" != "false" ]]; then echo "--parent"; fi) \
          --output json \
          > branch_out
        
        echo "branch reset out:"
        cat branch_out

        echo "branch_id=$(cat branch_out | jq --raw-output '.id')" >> $GITHUB_OUTPUT
        
        CS_POOLED=$(neonctl cs ${{ inputs.branch }} --project-id ${{ inputs.project_id }} --pooled)
        CS=$(neonctl cs ${{ inputs.branch }} --project-id ${{ inputs.project_id }})
        
        echo "db_url=${CS}" >> $GITHUB_OUTPUT
        echo "db_url_with_pooler=${CS_POOLED}" >> $GITHUB_OUTPUT
