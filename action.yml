name: 'Neon Database Reset Branch Action'
author: 'Neon Database'
description: 'Resets a Neon branch'
branding:
  icon: 'box'
  color: 'green'

inputs:
  project_id:
    required: true
    description: 'The project id'
  branch:
    required: true
    description: 'The branch name or id to reset'
  api_key:
    description: 'The Neon API key'
    required: true
  parent:
    description: 'If specified, the branch will be reset to the parent branch'
    required: false
  cs_role_name:
    description: 'The output connection string db role name'
    required: false
  cs_database:
    description: 'The output connection string database name'
    required: false
  cs_prisma:
    description: 'Use prisma in output connection string or not'
    required: false
    default: 'false'
  cs_ssl:
    description: >
      Add sslmode to the connection string. Supported values are: "require", "verify-ca", "verify-full", "omit".
    required: false
    default: 'require'

outputs:
  branch_id:
    description: 'Returns the branch id'
    value: ${{ steps.reset-branch.outputs.branch_id }}
  db_url:
    description: 'DATABASE_URL of the branch after the reset'
    value: ${{ steps.reset-branch.outputs.db_url }}
  db_url_with_pooler:
    description: 'DATABASE_URL with pooler of the branch after the reset'
    value: ${{ steps.reset-branch.outputs.db_url_with_pooler }}
  host:
    description: 'Branch host after reset'
    value: ${{ steps.reset-branch.outputs.host }}
  host_with_pooler:
    description: 'Branch host with pooling enabled after reset'
    value: ${{ steps.reset-branch.outputs.host_with_pooler }}
  password:
    description: 'Password for connecting to the new branch database with the input username after reset'
    value: ${{ steps.reset-branch.outputs.password }}

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
    - run: npm i -g neonctl@v1
      shell: bash
    - name: Reset branch
      env:
        NEON_API_KEY: ${{ inputs.api_key }}
      id: reset-branch
      shell: bash
      run: |
        neonctl branches reset ${{ inputs.branch }} \
          --project-id ${{ inputs.project_id }} \
          $(if [[ -n "${{ inputs.parent }}" ]] && [[ "${{ inputs.parent }}" != "false" ]]; then echo "--parent"; fi) \
          --output json \
          > branch_out
        
        echo "branch reset out:"
        cat branch_out

        echo "branch_id=$(cat branch_out | jq --raw-output '.id')" >> $GITHUB_OUTPUT
        
        cs_json () {
          neonctl cs ${{inputs.branch_id}} \
          --project-id ${{ inputs.project_id }} \
          $(if [[ -n "${{ inputs.cs_role_name }}" ]] && [[ "${{ inputs.cs_role_name }}" != "false" ]]; then echo "--role-name ${{ inputs.cs_role_name }}"; fi) \
          $(if [[ -n "${{ inputs.cs_database }}" ]] && [[ "${{ inputs.cs_database }}" != "false" ]]; then echo "--database-name ${{ inputs.cs_database }}"; fi) \
          $(if [[ -n "${{ inputs.cs_ssl }}" ]]; then echo "--ssl ${{ inputs.cs_ssl }}"; fi) \
          $(if [[ -n "${{ inputs.cs_prisma }}" ]]; then echo "--prisma ${{ inputs.cs_prisma }}"; fi) \
          --extended -o json \
          $(if [[ -n "$1" ]]; then echo "--pooled"; fi)
        }
        
        CS_JSON=$(cs_json)
        CS_JSON_POOLED=$(cs_json true)
        
        echo "db_url=$(echo $CS_JSON | jq -r '.connection_string')" >> $GITHUB_OUTPUT
        echo "db_url_with_pooler=${CS_JSON_POOLED}" >> $GITHUB_OUTPUT
        
        echo "host=$(echo $CS_JSON | jq -r '.host')" >> $GITHUB_OUTPUT
        echo "host_with_pooler=$(echo $CS_JSON_POOLED | jq -r '.host')" >> $GITHUB_OUTPUT
        
        echo "::add-mask::$(echo $CS_JSON | jq -r '.password')"
        echo "password=$(echo $CS_JSON | jq -r '.password')" >> $GITHUB_OUTPUT
